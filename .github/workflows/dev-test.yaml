name: Integration Tests, Make Docker Image and E2E Tests

on:
  push:
    branches:
      - 'develop'

env:
  VERSION: ${{ github.ref_name }}-${{ github.sha }}

jobs:
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 21

    - name: Cache Maven dependencies
      uses: actions/cache/restore@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
            ${{ runner.os }}-maven-

    - name: 'Create env.properties file'
      run: |
          touch .env
          echo "${{secrets.BACKEND_ENV_TEST }}" > env.properties

    - name: Integration Tests
      run: mvn clean verify -Pintegrationtest -B

  docker:
    runs-on: ubuntu-latest
    needs: integration
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Convert repository name to lowercase and set Docker image
        run: |
          REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          echo "DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/$REPO_NAME" >> $GITHUB_ENV
          
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build Docker image
        run: |
          docker buildx build --platform linux/amd64 --tag  \
            ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}  \
            --cache-to type=gha,mode=max,compression=zstd \
            --cache-from type=gha,mode=max,compression=zstd --push .

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          sarif_file: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Echo Docker image
        run: |
          echo ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }} .
